=================================================== 
       INFORME DEL PROYECTO DIYMON                  
=================================================== 
 
--- START OF FILE CMakeLists.txt --- 
# The following lines of boilerplate have to be in your project's
# CMakeLists in this exact order for cmake to work correctly
cmake_minimum_required(VERSION 3.5)

include($ENV{IDF_PATH}/tools/cmake/project.cmake)
project(app-template)
 
--- START OF FILE main\CMakeLists.txt --- 
# CMakeLists.txt para el componente 'main' del proyecto DIYMON.

idf_component_register(
    SRCS 
        "main.c"
        "hardware_manager.c"

    INCLUDE_DIRS
        "."

    # REQUIRES: Lista de otros componentes del proyecto de los que 'main' depende.
    # En ESP-IDF v5.x, componentes base como 'esp_log' y 'freertos' se incluyen automáticamente.
    REQUIRES
        # --- Componentes del sistema ESP-IDF ---
        nvs_flash       # Para guardar datos de forma persistente.

        # --- Componentes de la Interfaz Gráfica ---
        esp_lvgl_port   # El componente que adapta LVGL para el ESP32.
        lvgl   
        # --- Componentes de Hardware Específicos (BSP) ---
        # Este componente debe existir en tu carpeta 'components' y contener
        # todos los ficheros bsp_*.c y bsp_*.h
        esp_bsp

        # --- Componentes propios de DIYMON ---
        # Nuestro componente 'main' necesita usar la UI, por lo que debe requerir 'diymon_ui'.
        diymon_ui
        
        # --- [NUEVO] El cerebro del juego ---
        # Se añade el nuevo componente que contiene toda la lógica de evolución y combate.
        diymon_core
) 
--- START OF FILE main\main.c --- 
/*
 * =====================================================================================
 *
 *       Filename:  main.c
 *
 *    Description:  Punto de entrada principal para el firmware de DIYMON.
 *                  Inicializa los servicios básicos, el gestor de hardware y la
 *                  interfaz de usuario. Ahora también gestiona el temporizador de evolución.
 *
 *        Version:  1.2 (Con corrección del temporizador)
 *        Created:  [Fecha de hoy]
 *       Revision:  none
 *       Compiler:  xtensa-esp32-elf-gcc
 *
 *         Author:  Raúl Camacho Luna (con revisión de IA)
 *   Organization:  DIYMON Project
 *
 * =====================================================================================
 */

#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_lvgl_port.h"
#include "esp_timer.h"

#include "hardware_manager.h"
#include "ui.h"
#include "diymon_evolution.h"

static const char *TAG = "DIYMON_MAIN";

// [CORRECCIÓN] Se declara el handle como 'static' para que no se destruya al salir de app_main
static esp_timer_handle_t evolution_timer_handle;

static void evolution_timer_callback(void* arg) {
    const char* current_code = diymon_get_current_code();
    ESP_LOGI(TAG, "Revisando evolución. DIYMON actual: %s", current_code);

    const char* next_evolution = diymon_get_next_evolution_in_sequence(current_code);

    if (next_evolution != NULL) {
        ESP_LOGI(TAG, "¡EVOLUCIÓN! Nuevo código: %s", next_evolution);
        diymon_set_current_code(next_evolution);
        ui_update_diymon_sprite();
    } else {
        ESP_LOGI(TAG, "El DIYMON ha alcanzado su forma final. Deteniendo temporizador de evolución.");
        // Ahora, al llamar a stop, el handle es válido porque es estático.
        esp_timer_stop(evolution_timer_handle);
    }
}


void app_main(void)
{
    /* --- 1. Inicialización del Sistema Base --- */
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_LOGW(TAG, "NVS partition was corrupt, erasing and re-initializing...");
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);
    ESP_LOGI(TAG, "NVS system initialized successfully.");


    /* --- 2. Inicialización del Hardware --- */
    hardware_manager_init();
    ESP_LOGI(TAG, "Hardware Manager initialized successfully.");


    /* --- 3. Inicialización del Motor de Lógica del Juego --- */
    diymon_evolution_init();
    ESP_LOGI(TAG, "DIYMON Core Logic initialized successfully.");


    /* --- 4. Inicialización de la Interfaz de Usuario (UI) --- */
    ESP_LOGI(TAG, "Initializing DIYMON User Interface...");
    if (lvgl_port_lock(0)) {
        ui_init();
        lvgl_port_unlock();
    }
    

    /* --- 5. Creación e Inicio del Temporizador de Evolución --- */
    const esp_timer_create_args_t evolution_timer_args = {
            .callback = &evolution_timer_callback,
            .arg = NULL, // No necesitamos pasar el handle como argumento si es estático/global
            .name = "evolution-timer"
    };
    ESP_ERROR_CHECK(esp_timer_create(&evolution_timer_args, &evolution_timer_handle));
    ESP_ERROR_CHECK(esp_timer_start_periodic(evolution_timer_handle, 5 * 1000000));
    
    ESP_LOGI(TAG, "DIYMON Firmware is running! Evolution timer started. Welcome, creator!");
} 
--- START OF FILE main\hardware_manager.c --- 
/*
 * =====================================================================================
 *
 *       Filename:  hardware_manager.c
 *
 *    Description:  Implementación del gestor de hardware para DIYMON.
 *                  Centraliza la inicialización y configuración de todos los
 *                  periféricos del dispositivo.
 *
 *        Version:  1.1 (Con brillo configurable)
 *        Created:  [Fecha de hoy]
 *
 *         Author:  Raúl Camacho Luna (con revisión de IA)
 *   Organization:  DIYMON Project
 *
 * =====================================================================================
 */

#include "hardware_manager.h"

// Includes generales del sistema y drivers
#include "esp_log.h"
#include "esp_check.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "lv_fs_if.h" 
#include "lvgl.h"
#include "lvgl_helpers.h"

// Includes de la BSP (Board Support Package) para el hardware específico
#include "bsp_i2c.h"
#include "bsp_spi.h"
#include "bsp_display.h"
#include "bsp_touch.h"
#include "bsp_sdcard.h"
#include "bsp_battery.h"
#include "bsp_qmi8658.h"
#include "bsp_wifi.h"

// Includes de LVGL
#include "esp_lvgl_port.h"

// TAG para los logs de este fichero
static const char *TAG = "HW_MANAGER";

/* --- Configuración del Hardware --- */
// Es buena práctica definir aquí las constantes de configuración en lugar de
// tener "números mágicos" esparcidos por el código.

// Configuración de la pantalla
#define DISPLAY_ROTATION             0     // 0, 90, 180, 270
#define DISPLAY_BUFF_HEIGHT          50    // Altura del buffer de dibujado de LVGL
#define DISPLAY_BUFF_DOUBLE_BUFFER   1     // 1 para doble buffer, 0 para simple

// [NUEVO] Configuración del Brillo
#define DEFAULT_BRIGHTNESS           50    // Brillo inicial en porcentaje (0-100)

// Determina la resolución de la pantalla según la rotación
#if DISPLAY_ROTATION == 90 || DISPLAY_ROTATION == 270
#define LCD_H_RES (320)
#define LCD_V_RES (172)
#else
#define LCD_H_RES (172)
#define LCD_V_RES (320)
#endif


/* --- Variables estáticas del módulo --- */
static esp_lcd_panel_io_handle_t io_handle = NULL;
static esp_lcd_panel_handle_t panel_handle = NULL;
static esp_lcd_touch_handle_t touch_handle = NULL;

static lv_display_t *lvgl_disp = NULL;
static lv_indev_t *lvgl_touch_indev = NULL;


/* --- Declaraciones de funciones privadas --- */
static esp_err_t lvgl_driver_init(void);

/* --- Implementación de funciones --- */

esp_err_t hardware_manager_init(void)
{
    i2c_master_bus_handle_t i2c_bus_handle;

    ESP_LOGI(TAG, "Initializing I2C and SPI buses...");
    i2c_bus_handle = bsp_i2c_init();
    bsp_spi_init();
    
    ESP_LOGI(TAG, "Initializing sensors and peripherals...");
    bsp_battery_init();
    bsp_qmi8658_init(i2c_bus_handle);
    bsp_sdcard_init();

    ESP_LOGI(TAG, "Initializing display and touch panel...");
    bsp_display_init(&io_handle, &panel_handle, LCD_H_RES * DISPLAY_BUFF_HEIGHT);
    bsp_touch_init(&touch_handle, i2c_bus_handle, LCD_H_RES, LCD_V_RES, DISPLAY_ROTATION);

    ESP_LOGI(TAG, "Initializing LVGL graphics library driver...");
    ESP_ERROR_CHECK(lvgl_driver_init());

    ESP_LOGI(TAG, "Initializing display brightness control...");
    bsp_display_brightness_init();
    bsp_display_set_brightness(DEFAULT_BRIGHTNESS); // [MODIFICADO] Usa la nueva constante

    // --- [NUEVO] REGISTRO DEL SISTEMA DE FICHEROS PARA LVGL ---
    // Le decimos a LVGL que el disco 'S' corresponde a la ruta "/sdcard"
    // que es donde el driver BSP monta la tarjeta SD.
    lvgl_fs_init();
    ESP_LOGI(TAG, "LVGL File System initialized and SD card registered.");

    return ESP_OK;
}

static esp_err_t lvgl_driver_init(void)
{
    const lvgl_port_cfg_t lvgl_cfg = {
        .task_priority = 4,
        .task_stack = 1024 * 10,
        .task_affinity = -1,
        .task_max_sleep_ms = 500,
        .timer_period_ms = 5
    };
    ESP_RETURN_ON_ERROR(lvgl_port_init(&lvgl_cfg), TAG, "LVGL port initialization failed");

    lvgl_port_display_cfg_t disp_cfg = {
        .io_handle = io_handle,
        .panel_handle = panel_handle,
        .buffer_size = LCD_H_RES * DISPLAY_BUFF_HEIGHT,
        .double_buffer = DISPLAY_BUFF_DOUBLE_BUFFER,
        .hres = LCD_H_RES,
        .vres = LCD_V_RES,
        .monochrome = false,
        .rotation = {
            .swap_xy = false,
            .mirror_x = false,
            .mirror_y = false,
        },
        .flags = {
            .buff_dma = true,
#if LVGL_VERSION_MAJOR >= 9
            .swap_bytes = true,
#endif
        }};

    #if DISPLAY_ROTATION == 90
        disp_cfg.rotation.swap_xy = true;
        disp_cfg.rotation.mirror_x = true;
        ESP_ERROR_CHECK(esp_lcd_panel_set_gap(panel_handle, 0, 34));
    #elif DISPLAY_ROTATION == 180
        disp_cfg.rotation.mirror_x = true;
        disp_cfg.rotation.mirror_y = true;
        ESP_ERROR_CHECK(esp_lcd_panel_set_gap(panel_handle, 34, 0));
    #elif DISPLAY_ROTATION == 270
        disp_cfg.rotation.swap_xy = true;
        disp_cfg.rotation.mirror_y = true;
        ESP_ERROR_CHECK(esp_lcd_panel_set_gap(panel_handle, 0, 34));
    #else
        ESP_ERROR_CHECK(esp_lcd_panel_set_gap(panel_handle, 34, 0));
    #endif

    lvgl_disp = lvgl_port_add_disp(&disp_cfg);

    const lvgl_port_touch_cfg_t touch_cfg = {
        .disp = lvgl_disp,
        .handle = touch_handle,
    };
    lvgl_touch_indev = lvgl_port_add_touch(&touch_cfg);

    return ESP_OK;
} 
--- START OF FILE components\diymon_core\CMakeLists.txt --- 
idf_component_register(SRCS "diymon_evolution.c"
                    INCLUDE_DIRS "include"
                    # Le damos permiso para usar tanto los logs como la memoria flash
                    REQUIRES "log" "nvs_flash"
                    ) 
--- START OF FILE components\diymon_core\include\diymon_evolution.h --- 
// =============================================================================
//  diymon_evolution.h (Sin cambios necesarios)
// =============================================================================

#ifndef DIYMON_EVOLUTION_H
#define DIYMON_EVOLUTION_H

#include <stdint.h> // Para usar tipos como uint8_t

// Estructura para almacenar las estadísticas de una forma canónica
typedef struct {
    uint8_t fue;
    uint8_t res;
    uint8_t vel;
    uint8_t intel;
} diymon_stats_t;

/**
 * @brief Inicializa el motor de evolución.
 */
void diymon_evolution_init(void);

/**
 * @brief Obtiene las estadísticas base para un Código Evolutivo dado.
 * @param evo_code El código a buscar (ej: "1.2.3").
 * @return Un puntero a las estadísticas (solo lectura) o NULL si no se encuentra.
 */
const diymon_stats_t* diymon_get_stats_for_code(const char* evo_code);

/**
 * @brief Establece el código evolutivo del DIYMON activo.
 * @param new_code El nuevo código a establecer.
 */
void diymon_set_current_code(const char* new_code);

/**
 * @brief Obtiene el código evolutivo del DIYMON activo.
 * @return Un puntero al código actual.
 */
const char* diymon_get_current_code(void);

/**
 * @brief Obtiene el siguiente código en la secuencia de evolución predefinida.
 * @param current_code El código actual.
 * @return El siguiente código en la secuencia, o NULL si es la evolución final.
 */
const char* diymon_get_next_evolution_in_sequence(const char* current_code);


#endif // DIYMON_EVOLUTION_H 
--- START OF FILE components\diymon_core\diymon_evolution.c --- 
// =============================================================================
//  diymon_evolution.c (Versión con Memoria Persistente)
// =============================================================================

#include "diymon_evolution.h"
#include <string.h>
#include "esp_log.h"
#include "nvs_flash.h" // Necesario para la memoria no volátil
#include "nvs.h"       // Herramientas para leer/escribir en NVS

static const char* TAG = "DIYMON_CORE";

// --- LA TABLA MAESTRA DE ESTADÍSTICAS ---
static const struct {
    const char* evo_code;
    const diymon_stats_t stats;
} G_MASTER_TABLE[] = {
    {"0",     {5, 5, 5, 5}},
    {"1",     {7, 5, 6, 6}},
    {"1.1",   {9, 5, 7, 7}},
    {"1.1.1", {11, 5, 8, 8}},
};

// Variable estática que guarda el estado EN RAM del DIYMON actual.
static char G_CURRENT_DIYMON_CODE[16] = "0";


// ----- [NUEVO] Funciones para interactuar con la memoria FLASH (NVS) -----

/**
 * @brief Guarda el código evolutivo actual en la partición NVS.
 * Esta función es privada al componente.
 */
static void diymon_core_save_state(void) {
    nvs_handle_t nvs_handle;
    esp_err_t err = nvs_open("diymon_storage", NVS_READWRITE, &nvs_handle);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Error (%s) abriendo NVS para escribir!", esp_err_to_name(err));
        return;
    }

    // Guardamos el string G_CURRENT_DIYMON_CODE bajo la clave "evo_code"
    err = nvs_set_str(nvs_handle, "evo_code", G_CURRENT_DIYMON_CODE);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Error (%s) guardando 'evo_code' en NVS!", esp_err_to_name(err));
    }

    // Confirmamos los cambios para que se escriban físicamente en la flash
    err = nvs_commit(nvs_handle);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Error (%s) haciendo commit en NVS!", esp_err_to_name(err));
    }
    
    nvs_close(nvs_handle);
    ESP_LOGI(TAG, "Estado guardado en memoria flash: %s", G_CURRENT_DIYMON_CODE);
}

/**
 * @brief Carga el código evolutivo desde la NVS a la variable en RAM.
 * Esta función es privada al componente.
 */
static void diymon_core_load_state(void) {
    nvs_handle_t nvs_handle;
    esp_err_t err = nvs_open("diymon_storage", NVS_READONLY, &nvs_handle);
    if (err != ESP_OK) {
        ESP_LOGI(TAG, "NVS: No se encontró partición, empezando de cero.");
        return; // No hay nada que cargar, G_CURRENT_DIYMON_CODE se queda en "0"
    }

    size_t required_size = sizeof(G_CURRENT_DIYMON_CODE);
    err = nvs_get_str(nvs_handle, "evo_code", G_CURRENT_DIYMON_CODE, &required_size);

    switch (err) {
        case ESP_OK:
            ESP_LOGI(TAG, "Estado cargado de memoria flash: %s", G_CURRENT_DIYMON_CODE);
            break;
        case ESP_ERR_NVS_NOT_FOUND:
            ESP_LOGI(TAG, "NVS: Clave 'evo_code' no encontrada. Es la primera ejecución.");
            break;
        default:
            ESP_LOGE(TAG, "Error (%s) cargando 'evo_code' desde NVS!", esp_err_to_name(err));
    }
    
    nvs_close(nvs_handle);
}


// ----- [MODIFICADO] Funciones públicas que ahora usan la memoria -----

void diymon_evolution_init(void) {
    ESP_LOGI(TAG, "Motor de evolución inicializado.");
    // Al iniciar el cerebro, intentamos cargar el estado que teníamos guardado.
    diymon_core_load_state();
}

void diymon_set_current_code(const char* new_code) {
    // 1. Actualizamos la variable en RAM
    strncpy(G_CURRENT_DIYMON_CODE, new_code, sizeof(G_CURRENT_DIYMON_CODE) - 1);
    // 2. Guardamos inmediatamente el nuevo estado en la memoria flash
    diymon_core_save_state();
}


// ----- Funciones sin cambios en su lógica -----

const diymon_stats_t* diymon_get_stats_for_code(const char* evo_code) {
    for (int i = 0; i < sizeof(G_MASTER_TABLE) / sizeof(G_MASTER_TABLE[0]); ++i) {
        if (strcmp(G_MASTER_TABLE[i].evo_code, evo_code) == 0) {
            return &G_MASTER_TABLE[i].stats;
        }
    }
    return NULL;
}

const char* diymon_get_current_code(void) {
    return G_CURRENT_DIYMON_CODE;
}

const char* diymon_get_next_evolution_in_sequence(const char* current_code) {
    if (strcmp(current_code, "0") == 0) return "1";
    if (strcmp(current_code, "1") == 0) return "1.1";
    if (strcmp(current_code, "1.1") == 0) return "1.1.1";
    return NULL;
} 
--- START OF FILE components\diymon_ui\CMakeLists.txt --- 
# CMakeLists.txt para el componente 'diymon_ui'.
# Versión automatizada para gestionar fácilmente los archivos generados por EEZ Studio.

# 1. Buscar automáticamente todos los archivos fuente (.c) en este directorio.
#    La función file(GLOB ...) crea una lista de todos los archivos que terminan en .c
#    y la guarda en la variable 'component_sources'.
file(GLOB component_sources "*.c")

# 2. Registrar el componente con la lista de archivos que hemos encontrado.
idf_component_register(
    # SRCS: Usa la variable que hemos creado con todos los archivos .c
    SRCS ${component_sources}

    # INCLUDE_DIRS: Permite que otros componentes puedan hacer #include "fichero.h" de este.
    INCLUDE_DIRS "."

    # PRIV_INCLUDE_DIRS: Directorios de inclusión privados para este componente.
    PRIV_INCLUDE_DIRS "."
    
    # REQUIRES: Lista de otros componentes de los que 'diymon_ui' depende.
    # - lvgl: Necesario porque toda la UI está basada en él.
    # - NOTA: En ESP-IDF v5.x, 'esp_log' se incluye automáticamente y NO debe listarse aquí.
    REQUIRES 
        "lvgl"
        "diymon_core"
) 
--- START OF FILE components\diymon_ui\ui.h --- 
#ifndef UI_H_
#define UI_H_

#include "lvgl.h"
#include "screens.h"

#ifdef __cplusplus
extern "C" {
#endif

void ui_init();
void ui_tick();
void loadScreen(enum ScreensEnum screenId);

// ----- [NUEVO] DECLARACIÓN DE NUESTRAS FUNCIONES PÚBLICAS -----
// Ahora main.c y actions.c sabrán que estas funciones existen.

/**
 * @brief Actualiza el sprite del DIYMON basándose en su estado actual.
 */
void ui_update_diymon_sprite(void);

/**
 * @brief Reproduce una animación de acción (ej: "comer") desde la SD.
 * @param action_name El nombre del fichero GIF (sin la extensión).
 */
void ui_play_action_animation(const char* action_name);


#ifdef __cplusplus
}
#endif

#endif /*UI_H_*/ 
--- START OF FILE components\diymon_ui\ui.c --- 
/*
 * =====================================================================================
 *       Filename:  ui.c
 *    Description:  Punto de entrada de la UI y conector del sistema de acciones dinámicas.
 *                  Ahora gestiona las animaciones del DIYMON.
 *        Version:  5.0 (Con Animaciones desde SD)
 * =====================================================================================
 */
#include "ui.h"
#include "screens.h"  // Para create_screens()
#include "actions.h"    // Para execute_diymon_action()
#include "ui_priv.h"    // [NUEVO] Para compartir el objeto GIF
#include "diymon_evolution.h" // [NUEVO] Para saber el estado del DIYMON

#include "esp_log.h"
#include <stdio.h>    // [NUEVO] Para usar snprintf
#include <string.h>

static const char *TAG = "DIYMON_UI";

#if defined(EEZ_FOR_LVGL)
// Rama de compatibilidad con EEZ Flow (no usada)
#else

static int16_t currentScreen = -1;

// Objeto GIF global que representa a nuestro DIYMON en la pantalla
// Se inicializa en screens.c y se usa aquí para cambiar las animaciones.
// lv_obj_t *g_diymon_gif_obj = NULL; // Movido a screens.c

static lv_obj_t *getLvglObjectFromIndex(int32_t index) {
    if (index == -1) { return NULL; }
    return ((lv_obj_t **)&objects)[index];
}

// ----- [NUEVO] Funciones para gestionar las animaciones -----

/**
 * @brief Actualiza el sprite principal del DIYMON basándose en su código evolutivo actual.
 */
void ui_update_diymon_sprite(void) {
    if (!g_diymon_gif_obj) {
        ESP_LOGE(TAG, "El objeto GIF del DIYMON no ha sido creado!");
        return;
    }

    const char* evo_code = diymon_get_current_code();
    static char gif_path[64]; // 'static' para que no viva en el stack de una sola llamada

    // Construimos la ruta al GIF principal de la evolución actual
    snprintf(gif_path, sizeof(gif_path), "S:/%s/diymon.gif", evo_code);

    ESP_LOGI(TAG, "Cargando sprite principal desde: %s", gif_path);
    lv_gif_set_src(g_diymon_gif_obj, gif_path);
    lv_gif_restart(g_diymon_gif_obj);
}

/**
 * @brief Lanza una animación de acción (como comer, atacar, etc.).
 * @param action_name El nombre del fichero GIF de la acción (ej: "comer").
 */
void ui_play_action_animation(const char* action_name) {
    if (!g_diymon_gif_obj) {
        ESP_LOGE(TAG, "El objeto GIF del DIYMON no ha sido creado!");
        return;
    }

    const char* evo_code = diymon_get_current_code();
    static char gif_path[64];

    // Construimos la ruta a la animación de la acción
    snprintf(gif_path, sizeof(gif_path), "S:/%s/acciones/%s.gif", evo_code, action_name);
    
    ESP_LOGI(TAG, "Lanzando animación de acción desde: %s", gif_path);
    
    // Cambiamos la fuente al GIF de la acción
    lv_gif_set_src(g_diymon_gif_obj, gif_path);
    
    // Le decimos a LVGL que NO repita la animación. Cuando termine, se quedará en el último frame.
    lv_gif_set_loop(g_diymon_gif_obj, LV_GIF_LOOP_OFF);
    lv_gif_restart(g_diymon_gif_obj);

    // FUTURO: Podríamos usar un temporizador para, cuando termine la animación,
    // volver a poner la animación principal (idle).
    // Por ahora, para volver a la normalidad, tendrás que pulsar otro botón.
}


// ----- Funciones de inicialización y conexión -----

static void ui_connect_dynamic_actions() {
    ESP_LOGI(TAG, "Conectando acciones al sistema dinámico...");
    if (objects.comer) {
        lv_obj_remove_event_cb(objects.comer, action_comer);
        lv_obj_add_event_cb(objects.comer, execute_diymon_action, LV_EVENT_CLICKED, (void *)ACTION_ID_COMER);
    }
    // ... tus otras conexiones de botones ...
}

void loadScreen(enum ScreensEnum screenId) {
    currentScreen = screenId - 1;
    lv_obj_t *screen = getLvglObjectFromIndex(currentScreen);
    if (screen) {
        lv_scr_load_anim(screen, LV_SCR_LOAD_ANIM_FADE_IN, 200, 0, false);
    }
}

void ui_init() {
    create_screens();
    ui_connect_dynamic_actions();
    
    // [MODIFICADO] Al iniciar la UI, cargamos el sprite correspondiente al estado guardado.
    ui_update_diymon_sprite();

    loadScreen(SCREEN_ID_MAIN);
    ESP_LOGI(TAG, "UI de DIYMON inicializada y lista.");
}

void ui_tick() {
    if (currentScreen != -1) {
        tick_screen(currentScreen);
    }
}
#endif 
--- START OF FILE components\diymon_ui\screens.h --- 
#ifndef EEZ_LVGL_UI_SCREENS_H
#define EEZ_LVGL_UI_SCREENS_H

#include <lvgl.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _objects_t {
    lv_obj_t *main;
    lv_obj_t *idle;
    lv_obj_t *comiendo;
    lv_obj_t *ejercicio;
    lv_obj_t *ataque;
    lv_obj_t *scroll_ui;
    lv_obj_t *comer;
    lv_obj_t *pesas;
    lv_obj_t *atacar;
} objects_t;

extern objects_t objects;

enum ScreensEnum {
    SCREEN_ID_MAIN = 1,
};

void create_screen_main();
void delete_screen_main();
void tick_screen_main();

void create_screen_by_id(enum ScreensEnum screenId);
void delete_screen_by_id(enum ScreensEnum screenId);
void tick_screen_by_id(enum ScreensEnum screenId);
void tick_screen(int screen_index);

void create_screens();


#ifdef __cplusplus
}
#endif

#endif /*EEZ_LVGL_UI_SCREENS_H*/ 
--- START OF FILE components\diymon_ui\screens.c --- 
#include "screens.h"
#include "images.h"
#include "fonts.h"
#include "actions.h"
#include "styles.h"
#include "ui_priv.h" // [NUEVO] Para usar la variable global
#include "lvgl.h"

objects_t objects;
lv_obj_t *tick_value_change_obj;
uint32_t active_theme_index = 0;

// [NUEVO] Definimos aquí nuestra variable global para el GIF
lv_obj_t *g_diymon_gif_obj = NULL;

void create_screen_main() {
    lv_obj_t *obj = lv_obj_create(0);
    objects.main = obj;
    lv_obj_set_pos(obj, 0, 0);
    lv_obj_set_size(obj, 172, 320);
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
    lv_obj_set_style_bg_img_src(obj, &img_fondo, LV_PART_MAIN | LV_STATE_DEFAULT);
    {
        lv_obj_t *parent_obj = obj;
        
        // --- [MODIFICADO] CREACIÓN DEL ACTOR PRINCIPAL (UN ÚNICO GIF) ---
        g_diymon_gif_obj = lv_gif_create(parent_obj);
        objects.idle = g_diymon_gif_obj;
        lv_obj_set_pos(g_diymon_gif_obj, -4, 77);
        lv_obj_set_size(g_diymon_gif_obj, 180, 243);
        lv_obj_clear_flag(g_diymon_gif_obj, LV_OBJ_FLAG_SCROLLABLE);
        
        // --- [COMENTADO] Ya no creamos los animimg compilados ---
        /*
        { // Idle
            ...
        }
        { // Comiendo
            ...
        }
        { // ejercicio
            ...
        }
        { // ataque
            ...
        }
        */

        { // SCROLL_UI - Los botones no cambian
            lv_obj_t *obj = lv_obj_create(parent_obj);
            // ... todo tu código para el scroll y los botones (comer, pesas, atacar) se mantiene igual ...
             lv_obj_set_pos(obj, 0, 0);
            lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
            lv_obj_set_style_pad_left(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_obj_set_style_pad_top(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_obj_set_style_pad_right(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_obj_set_style_pad_bottom(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_obj_set_style_bg_opa(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_obj_set_style_border_width(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_obj_set_style_radius(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
            {
                lv_obj_t *parent_obj = obj;
                {
                    // Comer
                    lv_obj_t *obj = lv_btn_create(parent_obj);
                    objects.comer = obj;
                    lv_obj_set_pos(obj, 188, 18);
                    lv_obj_set_size(obj, 65, 59);
                    lv_obj_add_event_cb(obj, action_comer, LV_EVENT_CLICKED, (void *)0);
                    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
                    lv_obj_set_style_bg_img_src(obj, &img_apple, LV_PART_MAIN | LV_STATE_DEFAULT);
                    lv_obj_set_style_bg_opa(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
                }
                {
                    // Pesas
                    lv_obj_t *obj = lv_btn_create(parent_obj);
                    objects.pesas = obj;
                    lv_obj_set_pos(obj, 271, 18);
                    lv_obj_set_size(obj, 65, 59);
                    lv_obj_add_event_cb(obj, action_ejercicio, LV_EVENT_CLICKED, (void *)0);
                    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
                    lv_obj_set_style_bg_img_src(obj, &img_pesas, LV_PART_MAIN | LV_STATE_DEFAULT);
                    lv_obj_set_style_bg_opa(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
                }
                {
                    // Atacar
                    lv_obj_t *obj = lv_btn_create(parent_obj);
                    objects.atacar = obj;
                    lv_obj_set_pos(obj, 355, 18);
                    lv_obj_set_size(obj, 60, 60);
                    lv_obj_add_event_cb(obj, action_atacar, LV_EVENT_CLICKED, (void *)0);
                    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
                    lv_obj_set_style_bg_img_src(obj, &img_ataque, LV_PART_MAIN | LV_STATE_DEFAULT);
                    lv_obj_set_style_bg_opa(obj, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
                }
            }
        }
    }
    
    tick_screen_main();
}

// ... El resto del fichero (delete_screen_main, create_screens, etc.) se queda igual ...
// ...
// ...
// ...
void delete_screen_main() {
    lv_obj_del(objects.main);
    objects.main = 0;
    objects.idle = 0;
    objects.comiendo = 0;
    objects.ejercicio = 0;
    objects.ataque = 0;
    objects.scroll_ui = 0;
    objects.comer = 0;
    objects.pesas = 0;
    objects.atacar = 0;
}

void tick_screen_main() {
}



typedef void (*create_screen_func_t)();
create_screen_func_t create_screen_funcs[] = {
    create_screen_main,
};
void create_screen(int screen_index) {
    create_screen_funcs[screen_index]();
}
void create_screen_by_id(enum ScreensEnum screenId) {
    create_screen_funcs[screenId - 1]();
}

typedef void (*delete_screen_func_t)();
delete_screen_func_t delete_screen_funcs[] = {
    delete_screen_main,
};
void delete_screen(int screen_index) {
    delete_screen_funcs[screen_index]();
}
void delete_screen_by_id(enum ScreensEnum screenId) {
    delete_screen_funcs[screenId - 1]();
}

typedef void (*tick_screen_func_t)();
tick_screen_func_t tick_screen_funcs[] = {
    tick_screen_main,
};
void tick_screen(int screen_index) {
    tick_screen_funcs[screen_index]();
}
void tick_screen_by_id(enum ScreensEnum screenId) {
    tick_screen_funcs[screenId - 1]();
}

void create_screens() {
    lv_disp_t *dispp = lv_disp_get_default();
    lv_theme_t *theme = lv_theme_default_init(dispp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED), true, LV_FONT_DEFAULT);
    lv_disp_set_theme(dispp, theme);
    
    create_screen_main();
} 
--- START OF FILE components\diymon_ui\actions.h --- 
/*
 * =====================================================================================
 *       Filename:  actions.h
 *    Description:  Cabecera para el sistema de acciones dinámicas y basadas en datos de DIYMON.
 *        Version:  4.2 (Final y Correcto)
 * =====================================================================================
 */
#ifndef EEZ_LVGL_UI_ACTIONS_H
#define EEZ_LVGL_UI_ACTIONS_H

#include <lvgl.h>

#ifdef __cplusplus
extern "C" {
#endif

// --- El Modelo de Datos para las Acciones ---
typedef enum {
    ACTION_ID_COMER,
    ACTION_ID_EJERCICIO,
    ACTION_ID_ATACAR,
    ACTION_ID_COUNT
} diymon_action_id_t;

// --- El Orquestador de Acciones ---
void execute_diymon_action(lv_event_t *e);

// --- Funciones de Compatibilidad con EEZ Studio ---
extern void action_comer(lv_event_t * e);
extern void action_ejercicio(lv_event_t * e);
extern void action_atacar(lv_event_t * e);
extern void action_idle(lv_event_t * e);

#ifdef __cplusplus
}
#endif

#endif /*EEZ_LVGL_UI_ACTIONS_H*/ 
--- START OF FILE components\diymon_ui\actions.c --- 
#include "actions.h"
#include "esp_log.h"
#include "ui.h" // [NUEVO] Necesitamos la interfaz pública de la UI

static const char *TAG = "DIYMON_ACTIONS";

void execute_diymon_action(lv_event_t *e) {
    diymon_action_id_t action_id = (diymon_action_id_t)lv_event_get_user_data(e);
    ESP_LOGI(TAG, "Evento dinámico recibido para la acción ID: %d", action_id);

    // [MODIFICADO] Ahora llamamos a la función genérica de la UI para reproducir la animación
    switch(action_id) {
        case ACTION_ID_COMER:
            ui_play_action_animation("comer");
            break;
        case ACTION_ID_EJERCICIO:
            ui_play_action_animation("ejercicio");
            break;
        case ACTION_ID_ATACAR:
            ui_play_action_animation("ataque");
            break;
        default:
            ESP_LOGW(TAG, "Acción ID %d no reconocida.", action_id);
            break;
    }
}

// Las funciones antiguas ya no son necesarias, pero las dejamos por si acaso
void action_comer(lv_event_t *e) { execute_diymon_action(e); }
void action_ejercicio(lv_event_t *e) { execute_diymon_action(e); }
void action_atacar(lv_event_t *e) { execute_diymon_action(e); }
void action_idle(lv_event_t *e) { } // Ya no necesitamos volver a idle desde aquí 
--- START OF FILE main\lv_conf.h --- 
/**
 * @file lv_conf.h
 * Configuration file for v8.4.0
 */

/*
 * Copy this file as `lv_conf.h`
 * 1. simply next to the `lvgl` folder
 * 2. or any other places and
 *    - define `LV_CONF_INCLUDE_SIMPLE`
 *    - add the path as include path
 */

/* clang-format off */
#if 1 /*Set it to "1" to enable content*/

#ifndef LV_CONF_H
#define LV_CONF_H

#include <stdint.h>

/*====================
   COLOR SETTINGS
 *====================*/

/*Color depth: 1 (1 byte per pixel), 8 (RGB332), 16 (RGB565), 32 (ARGB8888)*/
#define LV_COLOR_DEPTH 16

/*Swap the 2 bytes of RGB565 color. Useful if the display has an 8-bit interface (e.g. SPI)*/
#define LV_COLOR_16_SWAP 0

/*Enable features to draw on transparent background.
 *It's required if opa, and transform_* style properties are used.
 *Can be also used if the UI is above another layer, e.g. an OSD menu or video player.*/
#define LV_COLOR_SCREEN_TRANSP 0

/* Adjust color mix functions rounding. GPUs might calculate color mix (blending) differently.
 * 0: round down, 64: round up from x.75, 128: round up from half, 192: round up from x.25, 254: round up */
#define LV_COLOR_MIX_ROUND_OFS 0

/*Images pixels with this color will not be drawn if they are chroma keyed)*/
#define LV_COLOR_CHROMA_KEY lv_color_hex(0x00ff00)         /*pure green*/

/*=========================
   MEMORY SETTINGS
 *=========================*/

/*1: use custom malloc/free, 0: use the built-in `lv_mem_alloc()` and `lv_mem_free()`*/
#define LV_MEM_CUSTOM 0
#if LV_MEM_CUSTOM == 0
    /*Size of the memory available for `lv_mem_alloc()` in bytes (>= 2kB)*/
    #define LV_MEM_SIZE (48U * 1024U)          /*[bytes]*/

    /*Set an address for the memory pool instead of allocating it as a normal array. Can be in external SRAM too.*/
    #define LV_MEM_ADR 0     /*0: unused*/
    /*Instead of an address give a memory allocator that will be called to get a memory pool for LVGL. E.g. my_malloc*/
    #if LV_MEM_ADR == 0
        #undef LV_MEM_POOL_INCLUDE
        #undef LV_MEM_POOL_ALLOC
    #endif

#else       /*LV_MEM_CUSTOM*/
    #define LV_MEM_CUSTOM_INCLUDE <stdlib.h>   /*Header for the dynamic memory function*/
    #define LV_MEM_CUSTOM_ALLOC   malloc
    #define LV_MEM_CUSTOM_FREE    free
    #define LV_MEM_CUSTOM_REALLOC realloc
#endif     /*LV_MEM_CUSTOM*/

/*Number of the intermediate memory buffer used during rendering and other internal processing mechanisms.
 *You will see an error log message if there wasn't enough buffers. */
#define LV_MEM_BUF_MAX_NUM 16

/*Use the standard `memcpy` and `memset` instead of LVGL's own functions. (Might or might not be faster).*/
#define LV_MEMCPY_MEMSET_STD 0

/*====================
   HAL SETTINGS
 *====================*/

/*Default display refresh period. LVG will redraw changed areas with this period time*/
#define LV_DISP_DEF_REFR_PERIOD 30      /*[ms]*/

/*Input device read period in milliseconds*/
#define LV_INDEV_DEF_READ_PERIOD 30     /*[ms]*/

/*Use a custom tick source that tells the elapsed time in milliseconds.
 *It removes the need to manually update the tick with `lv_tick_inc()`)*/
#define LV_TICK_CUSTOM 0
#if LV_TICK_CUSTOM
    #define LV_TICK_CUSTOM_INCLUDE "Arduino.h"         /*Header for the system time function*/
    #define LV_TICK_CUSTOM_SYS_TIME_EXPR (millis())    /*Expression evaluating to current system time in ms*/
    /*If using lvgl as ESP32 component*/
    // #define LV_TICK_CUSTOM_INCLUDE "esp_timer.h"
    // #define LV_TICK_CUSTOM_SYS_TIME_EXPR ((esp_timer_get_time() / 1000LL))
#endif   /*LV_TICK_CUSTOM*/

/*Default Dot Per Inch. Used to initialize default sizes such as widgets sized, style paddings.
 *(Not so important, you can adjust it to modify default sizes and spaces)*/
#define LV_DPI_DEF 130     /*[px/inch]*/

/*=======================
 * FEATURE CONFIGURATION
 *=======================*/

/*-------------
 * Drawing
 *-----------*/

/*Enable complex draw engine.
 *Required to draw shadow, gradient, rounded corners, circles, arc, skew lines, image transformations or any masks*/
#define LV_DRAW_COMPLEX 1
#if LV_DRAW_COMPLEX != 0

    /*Allow buffering some shadow calculation.
    *LV_SHADOW_CACHE_SIZE is the max. shadow size to buffer, where shadow size is `shadow_width + radius`
    *Caching has LV_SHADOW_CACHE_SIZE^2 RAM cost*/
    #define LV_SHADOW_CACHE_SIZE 0

    /* Set number of maximally cached circle data.
    * The circumference of 1/4 circle are saved for anti-aliasing
    * radius * 4 bytes are used per circle (the most often used radiuses are saved)
    * 0: to disable caching */
    #define LV_CIRCLE_CACHE_SIZE 4
#endif /*LV_DRAW_COMPLEX*/

/**
 * "Simple layers" are used when a widget has `style_opa < 255` to buffer the widget into a layer
 * and blend it as an image with the given opacity.
 * Note that `bg_opa`, `text_opa` etc don't require buffering into layer)
 * The widget can be buffered in smaller chunks to avoid using large buffers.
 *
 * - LV_LAYER_SIMPLE_BUF_SIZE: [bytes] the optimal target buffer size. LVGL will try to allocate it
 * - LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE: [bytes]  used if `LV_LAYER_SIMPLE_BUF_SIZE` couldn't be allocated.
 *
 * Both buffer sizes are in bytes.
 * "Transformed layers" (where transform_angle/zoom properties are used) use larger buffers
 * and can't be drawn in chunks. So these settings affects only widgets with opacity.
 */
#define LV_LAYER_SIMPLE_BUF_SIZE          (24 * 1024)
#define LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE (3 * 1024)

/*Default image cache size. Image caching keeps the images opened.
 *If only the built-in image formats are used there is no real advantage of caching. (I.e. if no new image decoder is added)
 *With complex image decoders (e.g. PNG or JPG) caching can save the continuous open/decode of images.
 *However the opened images might consume additional RAM.
 *0: to disable caching*/
#define LV_IMG_CACHE_DEF_SIZE 0

/*Number of stops allowed per gradient. Increase this to allow more stops.
 *This adds (sizeof(lv_color_t) + 1) bytes per additional stop*/
#define LV_GRADIENT_MAX_STOPS 2

/*Default gradient buffer size.
 *When LVGL calculates the gradient "maps" it can save them into a cache to avoid calculating them again.
 *LV_GRAD_CACHE_DEF_SIZE sets the size of this cache in bytes.
 *If the cache is too small the map will be allocated only while it's required for the drawing.
 *0 mean no caching.*/
#define LV_GRAD_CACHE_DEF_SIZE 0

/*Allow dithering the gradients (to achieve visual smooth color gradients on limited color depth display)
 *LV_DITHER_GRADIENT implies allocating one or two more lines of the object's rendering surface
 *The increase in memory consumption is (32 bits * object width) plus 24 bits * object width if using error diffusion */
#define LV_DITHER_GRADIENT 0
#if LV_DITHER_GRADIENT
    /*Add support for error diffusion dithering.
     *Error diffusion dithering gets a much better visual result, but implies more CPU consumption and memory when drawing.
     *The increase in memory consumption is (24 bits * object's width)*/
    #define LV_DITHER_ERROR_DIFFUSION 0
#endif

/*Maximum buffer size to allocate for rotation.
 *Only used if software rotation is enabled in the display driver.*/
#define LV_DISP_ROT_MAX_BUF (10*1024)

/*-------------
 * GPU
 *-----------*/

/*Use Arm's 2D acceleration library Arm-2D */
#define LV_USE_GPU_ARM2D 0

/*Use STM32's DMA2D (aka Chrom Art) GPU*/
#define LV_USE_GPU_STM32_DMA2D 0
#if LV_USE_GPU_STM32_DMA2D
    /*Must be defined to include path of CMSIS header of target processor
    e.g. "stm32f7xx.h" or "stm32f4xx.h"*/
    #define LV_GPU_DMA2D_CMSIS_INCLUDE
#endif

/*Enable RA6M3 G2D GPU*/
#define LV_USE_GPU_RA6M3_G2D 0
#if LV_USE_GPU_RA6M3_G2D
    /*include path of target processor
    e.g. "hal_data.h"*/
    #define LV_GPU_RA6M3_G2D_INCLUDE "hal_data.h"
#endif

/*Use SWM341's DMA2D GPU*/
#define LV_USE_GPU_SWM341_DMA2D 0
#if LV_USE_GPU_SWM341_DMA2D
    #define LV_GPU_SWM341_DMA2D_INCLUDE "SWM341.h"
#endif

/*Use NXP's PXP GPU iMX RTxxx platforms*/
#define LV_USE_GPU_NXP_PXP 0
#if LV_USE_GPU_NXP_PXP
    /*1: Add default bare metal and FreeRTOS interrupt handling routines for PXP (lv_gpu_nxp_pxp_osa.c)
    *   and call lv_gpu_nxp_pxp_init() automatically during lv_init(). Note that symbol SDK_OS_FREE_RTOS
    *   has to be defined in order to use FreeRTOS OSA, otherwise bare-metal implementation is selected.
    *0: lv_gpu_nxp_pxp_init() has to be called manually before lv_init()
    */
    #define LV_USE_GPU_NXP_PXP_AUTO_INIT 0
#endif

/*Use NXP's VG-Lite GPU iMX RTxxx platforms*/
#define LV_USE_GPU_NXP_VG_LITE 0

/*Use SDL renderer API*/
#define LV_USE_GPU_SDL 0
#if LV_USE_GPU_SDL
    #define LV_GPU_SDL_INCLUDE_PATH <SDL2/SDL.h>
    /*Texture cache size, 8MB by default*/
    #define LV_GPU_SDL_LRU_SIZE (1024 * 1024 * 8)
    /*Custom blend mode for mask drawing, disable if you need to link with older SDL2 lib*/
    #define LV_GPU_SDL_CUSTOM_BLEND_MODE (SDL_VERSION_ATLEAST(2, 0, 6))
#endif

/*-------------
 * Logging
 *-----------*/

/*Enable the log module*/
#define LV_USE_LOG 0
#if LV_USE_LOG

    /*How important log should be added:
    *LV_LOG_LEVEL_TRACE       A lot of logs to give detailed information
    *LV_LOG_LEVEL_INFO        Log important events
    *LV_LOG_LEVEL_WARN        Log if something unwanted happened but didn't cause a problem
    *LV_LOG_LEVEL_ERROR       Only critical issue, when the system may fail
    *LV_LOG_LEVEL_USER        Only logs added by the user
    *LV_LOG_LEVEL_NONE        Do not log anything*/
    #define LV_LOG_LEVEL LV_LOG_LEVEL_WARN

    /*1: Print the log with 'printf';
    *0: User need to register a callback with `lv_log_register_print_cb()`*/
    #define LV_LOG_PRINTF 0

    /*Enable/disable LV_LOG_TRACE in modules that produces a huge number of logs*/
    #define LV_LOG_TRACE_MEM        1
    #define LV_LOG_TRACE_TIMER      1
    #define LV_LOG_TRACE_INDEV      1
    #define LV_LOG_TRACE_DISP_REFR  1
    #define LV_LOG_TRACE_EVENT      1
    #define LV_LOG_TRACE_OBJ_CREATE 1
    #define LV_LOG_TRACE_LAYOUT     1
    #define LV_LOG_TRACE_ANIM       1

#endif  /*LV_USE_LOG*/

/*-------------
 * Asserts
 *-----------*/

/*Enable asserts if an operation is failed or an invalid data is found.
 *If LV_USE_LOG is enabled an error message will be printed on failure*/
#define LV_USE_ASSERT_NULL          1   /*Check if the parameter is NULL. (Very fast, recommended)*/
#define LV_USE_ASSERT_MALLOC        1   /*Checks is the memory is successfully allocated or no. (Very fast, recommended)*/
#define LV_USE_ASSERT_STYLE         0   /*Check if the styles are properly initialized. (Very fast, recommended)*/
#define LV_USE_ASSERT_MEM_INTEGRITY 0   /*Check the integrity of `lv_mem` after critical operations. (Slow)*/
#define LV_USE_ASSERT_OBJ           0   /*Check the object's type and existence (e.g. not deleted). (Slow)*/

/*Add a custom handler when assert happens e.g. to restart the MCU*/
#define LV_ASSERT_HANDLER_INCLUDE <stdint.h>
#define LV_ASSERT_HANDLER while(1);   /*Halt by default*/

/*-------------
 * Others
 *-----------*/

/*1: Show CPU usage and FPS count*/
#define LV_USE_PERF_MONITOR 0
#if LV_USE_PERF_MONITOR
    #define LV_USE_PERF_MONITOR_POS LV_ALIGN_BOTTOM_RIGHT
#endif

/*1: Show the used memory and the memory fragmentation
 * Requires LV_MEM_CUSTOM = 0*/
#define LV_USE_MEM_MONITOR 0
#if LV_USE_MEM_MONITOR
    #define LV_USE_MEM_MONITOR_POS LV_ALIGN_BOTTOM_LEFT
#endif

/*1: Draw random colored rectangles over the redrawn areas*/
#define LV_USE_REFR_DEBUG 0

/*Change the built in (v)snprintf functions*/
#define LV_SPRINTF_CUSTOM 0
#if LV_SPRINTF_CUSTOM
    #define LV_SPRINTF_INCLUDE <stdio.h>
    #define lv_snprintf  snprintf
    #define lv_vsnprintf vsnprintf
#else   /*LV_SPRINTF_CUSTOM*/
    #define LV_SPRINTF_USE_FLOAT 0
#endif  /*LV_SPRINTF_CUSTOM*/

#define LV_USE_USER_DATA 1

/*Garbage Collector settings
 *Used if lvgl is bound to higher level language and the memory is managed by that language*/
#define LV_ENABLE_GC 0
#if LV_ENABLE_GC != 0
    #define LV_GC_INCLUDE "gc.h"                           /*Include Garbage Collector related things*/
#endif /*LV_ENABLE_GC*/

/*=====================
 *  COMPILER SETTINGS
 *====================*/

/*For big endian systems set to 1*/
#define LV_BIG_ENDIAN_SYSTEM 0

/*Define a custom attribute to `lv_tick_inc` function*/
#define LV_ATTRIBUTE_TICK_INC

/*Define a custom attribute to `lv_timer_handler` function*/
#define LV_ATTRIBUTE_TIMER_HANDLER

/*Define a custom attribute to `lv_disp_flush_ready` function*/
#define LV_ATTRIBUTE_FLUSH_READY

/*Required alignment size for buffers*/
#define LV_ATTRIBUTE_MEM_ALIGN_SIZE 1

/*Will be added where memories needs to be aligned (with -Os data might not be aligned to boundary by default).
 * E.g. __attribute__((aligned(4)))*/
#define LV_ATTRIBUTE_MEM_ALIGN

/*Attribute to mark large constant arrays for example font's bitmaps*/
#define LV_ATTRIBUTE_LARGE_CONST

/*Compiler prefix for a big array declaration in RAM*/
#define LV_ATTRIBUTE_LARGE_RAM_ARRAY

/*Place performance critical functions into a faster memory (e.g RAM)*/
#define LV_ATTRIBUTE_FAST_MEM

/*Prefix variables that are used in GPU accelerated operations, often these need to be placed in RAM sections that are DMA accessible*/
#define LV_ATTRIBUTE_DMA

/*Export integer constant to binding. This macro is used with constants in the form of LV_<CONST> that
 *should also appear on LVGL binding API such as Micropython.*/
#define LV_EXPORT_CONST_INT(int_value) struct _silence_gcc_warning /*The default value just prevents GCC warning*/

/*Extend the default -32k..32k coordinate range to -4M..4M by using int32_t for coordinates instead of int16_t*/
#define LV_USE_LARGE_COORD 0

/*==================
 *   FONT USAGE
 *===================*/

/*Montserrat fonts with ASCII range and some symbols using bpp = 4
 *https://fonts.google.com/specimen/Montserrat*/
#define LV_FONT_MONTSERRAT_8  0
#define LV_FONT_MONTSERRAT_10 0
#define LV_FONT_MONTSERRAT_12 0
#define LV_FONT_MONTSERRAT_14 1
#define LV_FONT_MONTSERRAT_16 0
#define LV_FONT_MONTSERRAT_18 0
#define LV_FONT_MONTSERRAT_20 0
#define LV_FONT_MONTSERRAT_22 0
#define LV_FONT_MONTSERRAT_24 0
#define LV_FONT_MONTSERRAT_26 0
#define LV_FONT_MONTSERRAT_28 0
#define LV_FONT_MONTSERRAT_30 0
#define LV_FONT_MONTSERRAT_32 0
#define LV_FONT_MONTSERRAT_34 0
#define LV_FONT_MONTSERRAT_36 0
#define LV_FONT_MONTSERRAT_38 0
#define LV_FONT_MONTSERRAT_40 0
#define LV_FONT_MONTSERRAT_42 0
#define LV_FONT_MONTSERRAT_44 0
#define LV_FONT_MONTSERRAT_46 0
#define LV_FONT_MONTSERRAT_48 0

/*Demonstrate special features*/
#define LV_FONT_MONTSERRAT_12_SUBPX      0
#define LV_FONT_MONTSERRAT_28_COMPRESSED 0  /*bpp = 3*/
#define LV_FONT_DEJAVU_16_PERSIAN_HEBREW 0  /*Hebrew, Arabic, Persian letters and all their forms*/
#define LV_FONT_SIMSUN_16_CJK            0  /*1000 most common CJK radicals*/

/*Pixel perfect monospace fonts*/
#define LV_FONT_UNSCII_8  0
#define LV_FONT_UNSCII_16 0

/*Optionally declare custom fonts here.
 *You can use these fonts as default font too and they will be available globally.
 *E.g. #define LV_FONT_CUSTOM_DECLARE   LV_FONT_DECLARE(my_font_1) LV_FONT_DECLARE(my_font_2)*/
#define LV_FONT_CUSTOM_DECLARE

/*Always set a default font*/
#define LV_FONT_DEFAULT &lv_font_montserrat_14

/*Enable handling large font and/or fonts with a lot of characters.
 *The limit depends on the font size, font face and bpp.
 *Compiler error will be triggered if a font needs it.*/
#define LV_FONT_FMT_TXT_LARGE 0

/*Enables/disables support for compressed fonts.*/
#define LV_USE_FONT_COMPRESSED 0

/*Enable subpixel rendering*/
#define LV_USE_FONT_SUBPX 0
#if LV_USE_FONT_SUBPX
    /*Set the pixel order of the display. Physical order of RGB channels. Doesn't matter with "normal" fonts.*/
    #define LV_FONT_SUBPX_BGR 0  /*0: RGB; 1:BGR order*/
#endif

/*Enable drawing placeholders when glyph dsc is not found*/
#define LV_USE_FONT_PLACEHOLDER 1

/*=================
 *  TEXT SETTINGS
 *=================*/

/**
 * Select a character encoding for strings.
 * Your IDE or editor should have the same character encoding
 * - LV_TXT_ENC_UTF8
 * - LV_TXT_ENC_ASCII
 */
#define LV_TXT_ENC LV_TXT_ENC_UTF8

/*Can break (wrap) texts on these chars*/
#define LV_TXT_BREAK_CHARS " ,.;:-_"

/*If a word is at least this long, will break wherever "prettiest"
 *To disable, set to a value <= 0*/
#define LV_TXT_LINE_BREAK_LONG_LEN 0

/*Minimum number of characters in a long word to put on a line before a break.
 *Depends on LV_TXT_LINE_BREAK_LONG_LEN.*/
#define LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN 3

/*Minimum number of characters in a long word to put on a line after a break.
 *Depends on LV_TXT_LINE_BREAK_LONG_LEN.*/
#define LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN 3

/*The control character to use for signalling text recoloring.*/
#define LV_TXT_COLOR_CMD "#"

/*Support bidirectional texts. Allows mixing Left-to-Right and Right-to-Left texts.
 *The direction will be processed according to the Unicode Bidirectional Algorithm:
 *https://www.w3.org/International/articles/inline-bidi-markup/uba-basics*/
#define LV_USE_BIDI 0
#if LV_USE_BIDI
    /*Set the default direction. Supported values:
    *`LV_BASE_DIR_LTR` Left-to-Right
    *`LV_BASE_DIR_RTL` Right-to-Left
    *`LV_BASE_DIR_AUTO` detect texts base direction*/
    #define LV_BIDI_BASE_DIR_DEF LV_BASE_DIR_AUTO
#endif

/*Enable Arabic/Persian processing
 *In these languages characters should be replaced with an other form based on their position in the text*/
#define LV_USE_ARABIC_PERSIAN_CHARS 0

/*==================
 *  WIDGET USAGE
 *================*/

/*Documentation of the widgets: https://docs.lvgl.io/latest/en/html/widgets/index.html*/

#define LV_USE_ARC        1

#define LV_USE_BAR        1

#define LV_USE_BTN        1

#define LV_USE_BTNMATRIX  1

#define LV_USE_CANVAS     1

#define LV_USE_CHECKBOX   1

#define LV_USE_DROPDOWN   1   /*Requires: lv_label*/

#define LV_USE_IMG        1   /*Requires: lv_label*/

#define LV_USE_LABEL      1
#if LV_USE_LABEL
    #define LV_LABEL_TEXT_SELECTION 1 /*Enable selecting text of the label*/
    #define LV_LABEL_LONG_TXT_HINT 1  /*Store some extra info in labels to speed up drawing of very long texts*/
#endif

#define LV_USE_LINE       1

#define LV_USE_ROLLER     1   /*Requires: lv_label*/
#if LV_USE_ROLLER
    #define LV_ROLLER_INF_PAGES 7 /*Number of extra "pages" when the roller is infinite*/
#endif

#define LV_USE_SLIDER     1   /*Requires: lv_bar*/

#define LV_USE_SWITCH     1

#define LV_USE_TEXTAREA   1   /*Requires: lv_label*/
#if LV_USE_TEXTAREA != 0
    #define LV_TEXTAREA_DEF_PWD_SHOW_TIME 1500    /*ms*/
#endif

#define LV_USE_TABLE      1

/*==================
 * EXTRA COMPONENTS
 *==================*/

/*-----------
 * Widgets
 *----------*/
#define LV_USE_ANIMIMG    1

#define LV_USE_CALENDAR   1
#if LV_USE_CALENDAR
    #define LV_CALENDAR_WEEK_STARTS_MONDAY 0
    #if LV_CALENDAR_WEEK_STARTS_MONDAY
        #define LV_CALENDAR_DEFAULT_DAY_NAMES {"Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"}
    #else
        #define LV_CALENDAR_DEFAULT_DAY_NAMES {"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}
    #endif

    #define LV_CALENDAR_DEFAULT_MONTH_NAMES {"January", "February", "March",  "April", "May",  "June", "July", "August", "September", "October", "November", "December"}
    #define LV_USE_CALENDAR_HEADER_ARROW 1
    #define LV_USE_CALENDAR_HEADER_DROPDOWN 1
#endif  /*LV_USE_CALENDAR*/

#define LV_USE_CHART      1

#define LV_USE_COLORWHEEL 1

#define LV_USE_IMGBTN     1

#define LV_USE_KEYBOARD   1

#define LV_USE_LED        1

#define LV_USE_LIST       1

#define LV_USE_MENU       1

#define LV_USE_METER      1

#define LV_USE_MSGBOX     1

#define LV_USE_SPAN       1
#if LV_USE_SPAN
    /*A line text can contain maximum num of span descriptor */
    #define LV_SPAN_SNIPPET_STACK_SIZE 64
#endif

#define LV_USE_SPINBOX    1

#define LV_USE_SPINNER    1

#define LV_USE_TABVIEW    1

#define LV_USE_TILEVIEW   1

#define LV_USE_WIN        1

/*-----------
 * Themes
 *----------*/

/*A simple, impressive and very complete theme*/
#define LV_USE_THEME_DEFAULT 1
#if LV_USE_THEME_DEFAULT

    /*0: Light mode; 1: Dark mode*/
    #define LV_THEME_DEFAULT_DARK 0

    /*1: Enable grow on press*/
    #define LV_THEME_DEFAULT_GROW 1

    /*Default transition time in [ms]*/
    #define LV_THEME_DEFAULT_TRANSITION_TIME 80
#endif /*LV_USE_THEME_DEFAULT*/

/*A very simple theme that is a good starting point for a custom theme*/
#define LV_USE_THEME_BASIC 1

/*A theme designed for monochrome displays*/
#define LV_USE_THEME_MONO 1

/*-----------
 * Layouts
 *----------*/

/*A layout similar to Flexbox in CSS.*/
#define LV_USE_FLEX 1

/*A layout similar to Grid in CSS.*/
#define LV_USE_GRID 1

/*---------------------
 * 3rd party libraries
 *--------------------*/

/*File system interfaces for common APIs */

/*API for fopen, fread, etc*/
#define LV_USE_FS_STDIO 1
#if LV_USE_FS_STDIO
    #define LV_FS_STDIO_LETTER '\0'     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
    #define LV_FS_STDIO_PATH "S"         /*Set the working directory. File/directory paths will be appended to it.*/
    #define LV_FS_STDIO_CACHE_SIZE 0    /*>0 to cache this number of bytes in lv_fs_read()*/
#endif

/*API for open, read, etc*/
#define LV_USE_FS_POSIX 1
#if LV_USE_FS_POSIX
    #define LV_FS_POSIX_LETTER '\0'     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
    #define LV_FS_POSIX_PATH "S"         /*Set the working directory. File/directory paths will be appended to it.*/
    #define LV_FS_POSIX_CACHE_SIZE 0    /*>0 to cache this number of bytes in lv_fs_read()*/
#endif

/*API for CreateFile, ReadFile, etc*/
#define LV_USE_FS_WIN32 0
#if LV_USE_FS_WIN32
    #define LV_FS_WIN32_LETTER '\0'     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
    #define LV_FS_WIN32_PATH ""         /*Set the working directory. File/directory paths will be appended to it.*/
    #define LV_FS_WIN32_CACHE_SIZE 0    /*>0 to cache this number of bytes in lv_fs_read()*/
#endif

/*API for FATFS (needs to be added separately). Uses f_open, f_read, etc*/
#define LV_USE_FS_FATFS 0
#if LV_USE_FS_FATFS
    #define LV_FS_FATFS_LETTER '\0'     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
    #define LV_FS_FATFS_CACHE_SIZE 0    /*>0 to cache this number of bytes in lv_fs_read()*/
#endif

/*API for LittleFS (library needs to be added separately). Uses lfs_file_open, lfs_file_read, etc*/
#define LV_USE_FS_LITTLEFS 0
#if LV_USE_FS_LITTLEFS
    #define LV_FS_LITTLEFS_LETTER '\0'     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
    #define LV_FS_LITTLEFS_CACHE_SIZE 0    /*>0 to cache this number of bytes in lv_fs_read()*/
#endif

/*PNG decoder library*/
#define LV_USE_PNG 0

/*BMP decoder library*/
#define LV_USE_BMP 0

/* JPG + split JPG decoder library.
 * Split JPG is a custom format optimized for embedded systems. */
#define LV_USE_SJPG 0

/*GIF decoder library*/
#define LV_USE_GIF 1

/*QR code library*/
#define LV_USE_QRCODE 0

/*FreeType library*/
#define LV_USE_FREETYPE 0
#if LV_USE_FREETYPE
    /*Memory used by FreeType to cache characters [bytes] (-1: no caching)*/
    #define LV_FREETYPE_CACHE_SIZE (16 * 1024)
    #if LV_FREETYPE_CACHE_SIZE >= 0
        /* 1: bitmap cache use the sbit cache, 0:bitmap cache use the image cache. */
        /* sbit cache:it is much more memory efficient for small bitmaps(font size < 256) */
        /* if font size >= 256, must be configured as image cache */
        #define LV_FREETYPE_SBIT_CACHE 0
        /* Maximum number of opened FT_Face/FT_Size objects managed by this cache instance. */
        /* (0:use system defaults) */
        #define LV_FREETYPE_CACHE_FT_FACES 0
        #define LV_FREETYPE_CACHE_FT_SIZES 0
    #endif
#endif

/*Tiny TTF library*/
#define LV_USE_TINY_TTF 0
#if LV_USE_TINY_TTF
    /*Load TTF data from files*/
    #define LV_TINY_TTF_FILE_SUPPORT 0
#endif

/*Rlottie library*/
#define LV_USE_RLOTTIE 0

/*FFmpeg library for image decoding and playing videos
 *Supports all major image formats so do not enable other image decoder with it*/
#define LV_USE_FFMPEG 0
#if LV_USE_FFMPEG
    /*Dump input information to stderr*/
    #define LV_FFMPEG_DUMP_FORMAT 0
#endif

/*-----------
 * Others
 *----------*/

/*1: Enable API to take snapshot for object*/
#define LV_USE_SNAPSHOT 0

/*1: Enable Monkey test*/
#define LV_USE_MONKEY 0

/*1: Enable grid navigation*/
#define LV_USE_GRIDNAV 0

/*1: Enable lv_obj fragment*/
#define LV_USE_FRAGMENT 0

/*1: Support using images as font in label or span widgets */
#define LV_USE_IMGFONT 0

/*1: Enable a published subscriber based messaging system */
#define LV_USE_MSG 0

/*1: Enable Pinyin input method*/
/*Requires: lv_keyboard*/
#define LV_USE_IME_PINYIN 0
#if LV_USE_IME_PINYIN
    /*1: Use default thesaurus*/
    /*If you do not use the default thesaurus, be sure to use `lv_ime_pinyin` after setting the thesauruss*/
    #define LV_IME_PINYIN_USE_DEFAULT_DICT 1
    /*Set the maximum number of candidate panels that can be displayed*/
    /*This needs to be adjusted according to the size of the screen*/
    #define LV_IME_PINYIN_CAND_TEXT_NUM 6

    /*Use 9 key input(k9)*/
    #define LV_IME_PINYIN_USE_K9_MODE      1
    #if LV_IME_PINYIN_USE_K9_MODE == 1
        #define LV_IME_PINYIN_K9_CAND_TEXT_NUM 3
    #endif // LV_IME_PINYIN_USE_K9_MODE
#endif

/*==================
* EXAMPLES
*==================*/

/*Enable the examples to be built with the library*/
#define LV_BUILD_EXAMPLES 1

/*===================
 * DEMO USAGE
 ====================*/

/*Show some widget. It might be required to increase `LV_MEM_SIZE` */
#define LV_USE_DEMO_WIDGETS 0
#if LV_USE_DEMO_WIDGETS
#define LV_DEMO_WIDGETS_SLIDESHOW 0
#endif

/*Demonstrate the usage of encoder and keyboard*/
#define LV_USE_DEMO_KEYPAD_AND_ENCODER 0

/*Benchmark your system*/
#define LV_USE_DEMO_BENCHMARK 0
#if LV_USE_DEMO_BENCHMARK
/*Use RGB565A8 images with 16 bit color depth instead of ARGB8565*/
#define LV_DEMO_BENCHMARK_RGB565A8 0
#endif

/*Stress test for LVGL*/
#define LV_USE_DEMO_STRESS 0

/*Music player demo*/
#define LV_USE_DEMO_MUSIC 0
#if LV_USE_DEMO_MUSIC
    #define LV_DEMO_MUSIC_SQUARE    0
    #define LV_DEMO_MUSIC_LANDSCAPE 0
    #define LV_DEMO_MUSIC_ROUND     0
    #define LV_DEMO_MUSIC_LARGE     0
    #define LV_DEMO_MUSIC_AUTO_PLAY 0
#endif

/*--END OF LV_CONF_H--*/

#endif /*LV_CONF_H*/

#endif /*End of "Content enable"*/
 
 
=================================================== 
                  FIN DEL INFORME                   
=================================================== 
